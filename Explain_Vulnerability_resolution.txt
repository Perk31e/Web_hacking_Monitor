-- 통계 확인 쿼리 (선택적 실행)
/*
SELECT '사용자 수' as 항목, COUNT(*) as 개수 FROM users
UNION ALL
SELECT '게시글 수', COUNT(*) FROM posts  
UNION ALL
SELECT '댓글 수', COUNT(*) FROM comments
UNION ALL
SELECT '최상위 댓글 수', COUNT(*) FROM comments WHERE parent_comment_id IS NULL
UNION ALL  
SELECT '대댓글 수', COUNT(*) FROM comments WHERE parent_comment_id IS NOT NULL;
*/

-- 대댓글 구조 확인 쿼리 (선택적 실행)
/*
SELECT 
    p.title as 게시글제목,
    c1.content as 댓글내용,
    c1.created_at as 댓글작성일,
    u1.nickname as 댓글작성자,
    c2.content as 대댓글내용,
    c2.created_at as 대댓글작성일,
    u2.nickname as 대댓글작성자
FROM posts p
JOIN comments c1 ON p.id = c1.post_id AND c1.parent_comment_id IS NULL
LEFT JOIN comments c2 ON c1.id = c2.parent_comment_id  
LEFT JOIN users u1 ON c1.user_id = u1.id
LEFT JOIN users u2 ON c2.user_id = u2.id
WHERE p.id = 1  -- 특정 게시글의 댓글 구조 확인
ORDER BY c1.created_at, c2.created_at;
*/

-- 취약점 설명 및 수정 방법 (주석)
/*
=== 포함된 보안 취약점 ===

1. SQL Injection 취약점:
   - 위치: UserController, PostController의 모든 SQL 쿼리 (댓글/대댓글 포함)
   - 문제: 사용자 입력값을 직접 SQL 문자열에 연결
   - 수정방법: 
     String sql = "SELECT * FROM users WHERE email = ? AND password = ?";
     PreparedStatement pstmt = conn.prepareStatement(sql);
     pstmt.setString(1, email);
     pstmt.setString(2, password);

2. 파일 업로드 취약점:
   - 위치: PostController.createPost() 메소드
   - 문제: 
     * 파일 확장자 검증 없음 (웹쉘 업로드 가능)
     * 파일명 검증 없음 (경로 조작 공격 가능)  
     * 웹 접근 가능한 경로에 저장
     * 파일 크기 제한이 너무 큼
   - 수정방법:
     * 허용된 확장자만 업로드 가능하도록 검증
     * 파일명 sanitization
     * 웹 루트 외부 디렉토리 사용
     * 적절한 파일 크기 제한
     * 업로드된 파일 실행 권한 제거


=== 기타 보안 개선사항 ===

3. 비밀번호 평문 저장:
   - 수정방법: BCrypt 등을 사용한 해시화

4. 세션 관리:
   - 수정방법: Spring Security 사용

5. XSS 방지:
   - 수정방법: 입력값 이스케이프 처리

6. CSRF 방지:
   - 수정방법: CSRF 토큰 사용

주의: 이 코드는 교육 및 보안 테스트 목적으로만 사용하세요!
*/
